// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sun Feb 07 10:15:05 CET 2016
// generated file: do not modify
package com.aib.orm;

import com.aib.orm.dbobject.DbObject;
import com.aib.orm.dbobject.ForeignKeyViolationException;
import com.aib.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class People extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer peopleId = null;
    private String source = null;
    private String title = null;
    private String firstName = null;
    private String lastName = null;
    private String suffix = null;
    private String greeting = null;
    private Integer locationId = null;
    private Object photo = null;
    private String level = null;
    private String jobDiscip = null;
    private String department = null;
    private String specAddress = null;
    private String mailaddress = null;
    private String mailpostcode = null;
    private String deskPhone = null;
    private String deskFax = null;
    private String mobilePhone = null;
    private String mainEmail = null;
    private String alterEmail = null;
    private String pa = null;
    private String paPhone = null;
    private String paEmail = null;
    private String otherContacts = null;
    private Integer isPrimary = null;
    private Integer isSubscriber = null;
    private Integer isMarketintl = null;
    private Integer isMediabrief = null;
    private Integer isInsourcebook = null;
    private Integer isAibCoordinator = null;
    private Integer isAibJudge = null;
    private Integer isAibEntrant = null;
    private Integer isIndividualMember = null;
    private Date verifyDate = null;
    private Integer salesContactId = null;
    private Date actionDate = null;
    private String nextAction = null;
    private String externalUser = null;
    private String externalPasswd = null;
    private Integer lasteditedBy = null;
    private Timestamp lasteditDate = null;
    private Integer isInvoiceCntct = null;
    private Integer isDigitalChnl = null;
    private Integer countryId = null;

    public People(Connection connection) {
        super(connection, "people", "people_id");
        setColumnNames(new String[]{"people_id", "source", "title", "first_name", "last_name", "suffix", "greeting", "location_id", "photo", "level", "job_discip", "department", "spec_address", "mailaddress", "mailpostcode", "desk_phone", "desk_fax", "mobile_phone", "main_email", "alter_email", "pa", "pa_phone", "pa_email", "other_contacts", "is_primary", "is_subscriber", "is_marketintl", "is_mediabrief", "is_insourcebook", "is_aib_coordinator", "is_aib_judge", "is_aib_entrant", "is_individual_member", "verify_date", "sales_contact_id", "action_date", "next_action", "external_user", "external_passwd", "lastedited_by", "lastedit_date", "is_invoice_cntct", "is_digital_chnl", "country_id"});
    }

    public People(Connection connection, Integer peopleId, String source, String title, String firstName, String lastName, String suffix, String greeting, Integer locationId, Object photo, String level, String jobDiscip, String department, String specAddress, String mailaddress, String mailpostcode, String deskPhone, String deskFax, String mobilePhone, String mainEmail, String alterEmail, String pa, String paPhone, String paEmail, String otherContacts, Integer isPrimary, Integer isSubscriber, Integer isMarketintl, Integer isMediabrief, Integer isInsourcebook, Integer isAibCoordinator, Integer isAibJudge, Integer isAibEntrant, Integer isIndividualMember, Date verifyDate, Integer salesContactId, Date actionDate, String nextAction, String externalUser, String externalPasswd, Integer lasteditedBy, Timestamp lasteditDate, Integer isInvoiceCntct, Integer isDigitalChnl, Integer countryId) {
        super(connection, "people", "people_id");
        setNew(peopleId.intValue() <= 0);
//        if (peopleId.intValue() != 0) {
            this.peopleId = peopleId;
//        }
        this.source = source;
        this.title = title;
        this.firstName = firstName;
        this.lastName = lastName;
        this.suffix = suffix;
        this.greeting = greeting;
        this.locationId = locationId;
        this.photo = photo;
        this.level = level;
        this.jobDiscip = jobDiscip;
        this.department = department;
        this.specAddress = specAddress;
        this.mailaddress = mailaddress;
        this.mailpostcode = mailpostcode;
        this.deskPhone = deskPhone;
        this.deskFax = deskFax;
        this.mobilePhone = mobilePhone;
        this.mainEmail = mainEmail;
        this.alterEmail = alterEmail;
        this.pa = pa;
        this.paPhone = paPhone;
        this.paEmail = paEmail;
        this.otherContacts = otherContacts;
        this.isPrimary = isPrimary;
        this.isSubscriber = isSubscriber;
        this.isMarketintl = isMarketintl;
        this.isMediabrief = isMediabrief;
        this.isInsourcebook = isInsourcebook;
        this.isAibCoordinator = isAibCoordinator;
        this.isAibJudge = isAibJudge;
        this.isAibEntrant = isAibEntrant;
        this.isIndividualMember = isIndividualMember;
        this.verifyDate = verifyDate;
        this.salesContactId = salesContactId;
        this.actionDate = actionDate;
        this.nextAction = nextAction;
        this.externalUser = externalUser;
        this.externalPasswd = externalPasswd;
        this.lasteditedBy = lasteditedBy;
        this.lasteditDate = lasteditDate;
        this.isInvoiceCntct = isInvoiceCntct;
        this.isDigitalChnl = isDigitalChnl;
        this.countryId = countryId;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        People people = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT people_id,source,title,first_name,last_name,suffix,greeting,location_id,photo,level,job_discip,department,spec_address,mailaddress,mailpostcode,desk_phone,desk_fax,mobile_phone,main_email,alter_email,pa,pa_phone,pa_email,other_contacts,is_primary,is_subscriber,is_marketintl,is_mediabrief,is_insourcebook,is_aib_coordinator,is_aib_judge,is_aib_entrant,is_individual_member,verify_date,sales_contact_id,action_date,next_action,external_user,external_passwd,lastedited_by,lastedit_date,is_invoice_cntct,is_digital_chnl,country_id FROM people WHERE people_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                people = new People(getConnection());
                people.setPeopleId(new Integer(rs.getInt(1)));
                people.setSource(rs.getString(2));
                people.setTitle(rs.getString(3));
                people.setFirstName(rs.getString(4));
                people.setLastName(rs.getString(5));
                people.setSuffix(rs.getString(6));
                people.setGreeting(rs.getString(7));
                people.setLocationId(new Integer(rs.getInt(8)));
                people.setPhoto(rs.getObject(9));
                people.setLevel(rs.getString(10));
                people.setJobDiscip(rs.getString(11));
                people.setDepartment(rs.getString(12));
                people.setSpecAddress(rs.getString(13));
                people.setMailaddress(rs.getString(14));
                people.setMailpostcode(rs.getString(15));
                people.setDeskPhone(rs.getString(16));
                people.setDeskFax(rs.getString(17));
                people.setMobilePhone(rs.getString(18));
                people.setMainEmail(rs.getString(19));
                people.setAlterEmail(rs.getString(20));
                people.setPa(rs.getString(21));
                people.setPaPhone(rs.getString(22));
                people.setPaEmail(rs.getString(23));
                people.setOtherContacts(rs.getString(24));
                people.setIsPrimary(new Integer(rs.getInt(25)));
                people.setIsSubscriber(new Integer(rs.getInt(26)));
                people.setIsMarketintl(new Integer(rs.getInt(27)));
                people.setIsMediabrief(new Integer(rs.getInt(28)));
                people.setIsInsourcebook(new Integer(rs.getInt(29)));
                people.setIsAibCoordinator(new Integer(rs.getInt(30)));
                people.setIsAibJudge(new Integer(rs.getInt(31)));
                people.setIsAibEntrant(new Integer(rs.getInt(32)));
                people.setIsIndividualMember(new Integer(rs.getInt(33)));
                people.setVerifyDate(rs.getDate(34));
                people.setSalesContactId(new Integer(rs.getInt(35)));
                people.setActionDate(rs.getDate(36));
                people.setNextAction(rs.getString(37));
                people.setExternalUser(rs.getString(38));
                people.setExternalPasswd(rs.getString(39));
                people.setLasteditedBy(new Integer(rs.getInt(40)));
                people.setLasteditDate(rs.getTimestamp(41));
                people.setIsInvoiceCntct(new Integer(rs.getInt(42)));
                people.setIsDigitalChnl(new Integer(rs.getInt(43)));
                people.setCountryId(new Integer(rs.getInt(44)));
                people.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return people;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt = "INSERT INTO people (" + (this.getPeopleId() != 0 ? "people_id," : "") + "source,title,first_name,last_name,suffix,greeting,location_id,photo,level,job_discip,department,spec_address,mailaddress,mailpostcode,desk_phone,desk_fax,mobile_phone,main_email,alter_email,pa,pa_phone,pa_email,other_contacts,is_primary,is_subscriber,is_marketintl,is_mediabrief,is_insourcebook,is_aib_coordinator,is_aib_judge,is_aib_entrant,is_individual_member,verify_date,sales_contact_id,action_date,next_action,external_user,external_passwd,lastedited_by,lastedit_date,is_invoice_cntct,is_digital_chnl,country_id) values(" + (this.getPeopleId() != 0 ? "?," : "") + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getPeopleId().intValue()!=0) {
                 ps.setObject(++n, getPeopleId());
             }
             ps.setObject(++n, getSource());
             ps.setObject(++n, getTitle());
             ps.setObject(++n, getFirstName());
             ps.setObject(++n, getLastName());
             ps.setObject(++n, getSuffix());
             ps.setObject(++n, getGreeting());
             ps.setObject(++n, getLocationId());
             ps.setObject(++n, getPhoto());
             ps.setObject(++n, getLevel());
             ps.setObject(++n, getJobDiscip());
             ps.setObject(++n, getDepartment());
             ps.setObject(++n, getSpecAddress());
             ps.setObject(++n, getMailaddress());
             ps.setObject(++n, getMailpostcode());
             ps.setObject(++n, getDeskPhone());
             ps.setObject(++n, getDeskFax());
             ps.setObject(++n, getMobilePhone());
             ps.setObject(++n, getMainEmail());
             ps.setObject(++n, getAlterEmail());
             ps.setObject(++n, getPa());
             ps.setObject(++n, getPaPhone());
             ps.setObject(++n, getPaEmail());
             ps.setObject(++n, getOtherContacts());
             ps.setObject(++n, getIsPrimary());
             ps.setObject(++n, getIsSubscriber());
             ps.setObject(++n, getIsMarketintl());
             ps.setObject(++n, getIsMediabrief());
             ps.setObject(++n, getIsInsourcebook());
             ps.setObject(++n, getIsAibCoordinator());
             ps.setObject(++n, getIsAibJudge());
             ps.setObject(++n, getIsAibEntrant());
             ps.setObject(++n, getIsIndividualMember());
             ps.setObject(++n, getVerifyDate());
             ps.setObject(++n, getSalesContactId());
             ps.setObject(++n, getActionDate());
             ps.setObject(++n, getNextAction());
             ps.setObject(++n, getExternalUser());
             ps.setObject(++n, getExternalPasswd());
             ps.setObject(++n, getLasteditedBy());
             ps.setObject(++n, getLasteditDate());
             ps.setObject(++n, getIsInvoiceCntct());
             ps.setObject(++n, getIsDigitalChnl());
             ps.setObject(++n, getCountryId());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getPeopleId().intValue()==0) {
             stmt = "SELECT max(people_id) FROM people";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setPeopleId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (this.isNew()) {
            this.insert();
        } else {
            if (People.getTriggers() != null) {
                People.getTriggers().beforeUpdate((DbObject)this);
            }
            PreparedStatement ps = null;
            String stmt = "UPDATE people SET source = ?, title = ?, first_name = ?, last_name = ?, suffix = ?, greeting = ?, location_id = ?, photo = ?, level = ?, job_discip = ?, department = ?, spec_address = ?, mailaddress = ?, mailpostcode = ?, desk_phone = ?, desk_fax = ?, mobile_phone = ?, main_email = ?, alter_email = ?, pa = ?, pa_phone = ?, pa_email = ?, other_contacts = ?, is_primary = ?, is_subscriber = ?, is_marketintl = ?, is_mediabrief = ?, is_insourcebook = ?, is_aib_coordinator = ?, is_aib_judge = ?, is_aib_entrant = ?, is_individual_member = ?, verify_date = ?, sales_contact_id = ?, action_date = ?, next_action = ?, external_user = ?, external_passwd = ?, lastedited_by = ?, lastedit_date = ?, is_invoice_cntct = ?, is_digital_chnl = ?, country_id = ? WHERE people_id = " + this.getPeopleId();
            try {
                ps = this.getConnection().prepareStatement(stmt);
                ps.setObject(1, this.getSource());
                ps.setObject(2, this.getTitle());
                ps.setObject(3, this.getFirstName());
                ps.setObject(4, this.getLastName());
                ps.setObject(5, this.getSuffix());
                ps.setObject(6, this.getGreeting());
                ps.setObject(7, this.getLocationId());
                ps.setObject(8, this.getPhoto());
                ps.setObject(9, this.getLevel());
                ps.setObject(10, this.getJobDiscip());
                ps.setObject(11, this.getDepartment());
                ps.setObject(12, this.getSpecAddress());
                ps.setObject(13, this.getMailaddress());
                ps.setObject(14, this.getMailpostcode());
                ps.setObject(15, this.getDeskPhone());
                ps.setObject(16, this.getDeskFax());
                ps.setObject(17, this.getMobilePhone());
                ps.setObject(18, this.getMainEmail());
                ps.setObject(19, this.getAlterEmail());
                ps.setObject(20, this.getPa());
                ps.setObject(21, this.getPaPhone());
                ps.setObject(22, this.getPaEmail());
                ps.setObject(23, this.getOtherContacts());
                ps.setObject(24, this.getIsPrimary());
                ps.setObject(25, this.getIsSubscriber());
                ps.setObject(26, this.getIsMarketintl());
                ps.setObject(27, this.getIsMediabrief());
                ps.setObject(28, this.getIsInsourcebook());
                ps.setObject(29, this.getIsAibCoordinator());
                ps.setObject(30, this.getIsAibJudge());
                ps.setObject(31, this.getIsAibEntrant());
                ps.setObject(32, this.getIsIndividualMember());
                ps.setObject(33, this.getVerifyDate());
                ps.setObject(34, this.getSalesContactId());
                ps.setObject(35, this.getActionDate());
                ps.setObject(36, this.getNextAction());
                ps.setObject(37, this.getExternalUser());
                ps.setObject(38, this.getExternalPasswd());
                ps.setObject(39, this.getLasteditedBy());
                ps.setObject(40, this.getLasteditDate());
                ps.setObject(41, this.getIsInvoiceCntct());
                ps.setObject(42, this.getIsDigitalChnl());
                ps.setObject(43, this.getCountryId());
                ps.execute();
            }
            finally {
                if (ps != null) {
                    ps.close();
                }
            }
            this.setWasChanged(false);
            if (People.getTriggers() != null) {
                People.getTriggers().afterUpdate((DbObject)this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        {// delete cascade from peoplenote
            Peoplenote[] records = (Peoplenote[])Peoplenote.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peoplenote peoplenote = records[i];
                peoplenote.delete();
            }
        }
        {// delete cascade from peopleproduct
            Peopleproduct[] records = (Peopleproduct[])Peopleproduct.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peopleproduct peopleproduct = records[i];
                peopleproduct.delete();
            }
        }
        {// delete cascade from peopleinterest
            Peopleinterest[] records = (Peopleinterest[])Peopleinterest.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peopleinterest peopleinterest = records[i];
                peopleinterest.delete();
            }
        }
        {// delete cascade from peoplelink
            Peoplelink[] records = (Peoplelink[])Peoplelink.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peoplelink peoplelink = records[i];
                peoplelink.delete();
            }
        }
        {// delete cascade from departmenthistory
            Departmenthistory[] records = (Departmenthistory[])Departmenthistory.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Departmenthistory departmenthistory = records[i];
                departmenthistory.delete();
            }
        }
        {// delete cascade from peoplecompany
            Peoplecompany[] records = (Peoplecompany[])Peoplecompany.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peoplecompany peoplecompany = records[i];
                peoplecompany.delete();
            }
        }
        {// delete cascade from peopleaward
            Peopleaward[] records = (Peopleaward[])Peopleaward.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peopleaward peopleaward = records[i];
                peopleaward.delete();
            }
        }
        {// delete cascade from peopleindustry
            Peopleindustry[] records = (Peopleindustry[])Peopleindustry.load(getConnection(),"people_id = " + getPeopleId(),null);
            for (int i = 0; i<records.length; i++) {
                Peopleindustry peopleindustry = records[i];
                peopleindustry.delete();
            }
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM people " +
                "WHERE people_id = " + getPeopleId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setPeopleId(new Integer(-getPeopleId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getPeopleId().intValue() < 0);
    }

    public static DbObject[] load(Connection con, String whereCondition, String orderCondition) throws SQLException {
        ArrayList<People> lst;
        lst = new ArrayList<People>();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT people_id,source,title,first_name,last_name,suffix,greeting,location_id,photo,level,job_discip,department,spec_address,mailaddress,mailpostcode,desk_phone,desk_fax,mobile_phone,main_email,alter_email,pa,pa_phone,pa_email,other_contacts,is_primary,is_subscriber,is_marketintl,is_mediabrief,is_insourcebook,is_aib_coordinator,is_aib_judge,is_aib_entrant,is_individual_member,verify_date,sales_contact_id,action_date,next_action,external_user,external_passwd,lastedited_by,lastedit_date,is_invoice_cntct,is_digital_chnl,country_id FROM people " + (whereCondition != null && whereCondition.length() > 0 ? new StringBuilder().append(" WHERE ").append(whereCondition).toString() : "") + (orderCondition != null && orderCondition.length() > 0 ? new StringBuilder().append(" ORDER BY ").append(orderCondition).toString() : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                People dbObj = new People(con, new Integer(rs.getInt(1)), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), new Integer(rs.getInt(8)), rs.getObject(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13), rs.getString(14), rs.getString(15), rs.getString(16), rs.getString(17), rs.getString(18), rs.getString(19), rs.getString(20), rs.getString(21), rs.getString(22), rs.getString(23), rs.getString(24), new Integer(rs.getInt(25)), new Integer(rs.getInt(26)), new Integer(rs.getInt(27)), new Integer(rs.getInt(28)), new Integer(rs.getInt(29)), new Integer(rs.getInt(30)), new Integer(rs.getInt(31)), new Integer(rs.getInt(32)), new Integer(rs.getInt(33)), rs.getDate(34), new Integer(rs.getInt(35)), rs.getDate(36), rs.getString(37), rs.getString(38), rs.getString(39), new Integer(rs.getInt(40)), rs.getTimestamp(41), new Integer(rs.getInt(42)), new Integer(rs.getInt(43)), new Integer(rs.getInt(44)));
                lst.add(dbObj);
                dbObj.setNew(false);
            }
        }
        finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            }
            finally {
                if (ps != null) {
                    ps.close();
                }
            }
        }
        DbObject[] objects = new People[lst.size()];
        for (int i = 0; i < lst.size(); ++i) {
            People people = (People)((Object)lst.get(i));
            objects[i] = people;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT people_id FROM people " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getPeopleId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return peopleId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setPeopleId(id);
        setNew(prevIsNew);
    }

    public Integer getPeopleId() {
        return peopleId;
    }

    public void setPeopleId(Integer peopleId) throws ForeignKeyViolationException {
        setWasChanged(this.peopleId != null && this.peopleId != peopleId);
        this.peopleId = peopleId;
        setNew(peopleId.intValue() == 0);
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.source != null && !this.source.equals(source));
        this.source = source;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.title != null && !this.title.equals(title));
        this.title = title;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.firstName != null && !this.firstName.equals(firstName));
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.lastName != null && !this.lastName.equals(lastName));
        this.lastName = lastName;
    }

    public String getSuffix() {
        return suffix;
    }

    public void setSuffix(String suffix) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.suffix != null && !this.suffix.equals(suffix));
        this.suffix = suffix;
    }

    public String getGreeting() {
        return greeting;
    }

    public void setGreeting(String greeting) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.greeting != null && !this.greeting.equals(greeting));
        this.greeting = greeting;
    }

    public Integer getLocationId() {
        return locationId;
    }

    public void setLocationId(Integer locationId) throws SQLException, ForeignKeyViolationException {
        if (null != locationId)
            locationId = locationId == 0 ? null : locationId;
        if (locationId!=null && !Location.exists(getConnection(),"location_id = " + locationId)) {
            throw new ForeignKeyViolationException("Can't set location_id, foreign key violation: people_location_fk");
        }
        setWasChanged(this.locationId != null && !this.locationId.equals(locationId));
        this.locationId = locationId;
    }

    public Object getPhoto() {
        return photo;
    }

    public void setPhoto(Object photo) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.photo != null && !this.photo.equals(photo));
        this.photo = photo;
    }

    public String getLevel() {
        return level;
    }

    public void setLevel(String level) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.level != null && !this.level.equals(level));
        this.level = level;
    }

    public String getJobDiscip() {
        return jobDiscip;
    }

    public void setJobDiscip(String jobDiscip) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.jobDiscip != null && !this.jobDiscip.equals(jobDiscip));
        this.jobDiscip = jobDiscip;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.department != null && !this.department.equals(department));
        this.department = department;
    }

    public String getSpecAddress() {
        return specAddress;
    }

    public void setSpecAddress(String specAddress) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.specAddress != null && !this.specAddress.equals(specAddress));
        this.specAddress = specAddress;
    }

    public String getMailaddress() {
        return mailaddress;
    }

    public void setMailaddress(String mailaddress) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.mailaddress != null && !this.mailaddress.equals(mailaddress));
        this.mailaddress = mailaddress;
    }

    public String getMailpostcode() {
        return mailpostcode;
    }

    public void setMailpostcode(String mailpostcode) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.mailpostcode != null && !this.mailpostcode.equals(mailpostcode));
        this.mailpostcode = mailpostcode;
    }

    public String getDeskPhone() {
        return deskPhone;
    }

    public void setDeskPhone(String deskPhone) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.deskPhone != null && !this.deskPhone.equals(deskPhone));
        this.deskPhone = deskPhone;
    }

    public String getDeskFax() {
        return deskFax;
    }

    public void setDeskFax(String deskFax) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.deskFax != null && !this.deskFax.equals(deskFax));
        this.deskFax = deskFax;
    }

    public String getMobilePhone() {
        return mobilePhone;
    }

    public void setMobilePhone(String mobilePhone) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.mobilePhone != null && !this.mobilePhone.equals(mobilePhone));
        this.mobilePhone = mobilePhone;
    }

    public String getMainEmail() {
        return mainEmail;
    }

    public void setMainEmail(String mainEmail) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.mainEmail != null && !this.mainEmail.equals(mainEmail));
        this.mainEmail = mainEmail;
    }

    public String getAlterEmail() {
        return alterEmail;
    }

    public void setAlterEmail(String alterEmail) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.alterEmail != null && !this.alterEmail.equals(alterEmail));
        this.alterEmail = alterEmail;
    }

    public String getPa() {
        return pa;
    }

    public void setPa(String pa) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.pa != null && !this.pa.equals(pa));
        this.pa = pa;
    }

    public String getPaPhone() {
        return paPhone;
    }

    public void setPaPhone(String paPhone) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.paPhone != null && !this.paPhone.equals(paPhone));
        this.paPhone = paPhone;
    }

    public String getPaEmail() {
        return paEmail;
    }

    public void setPaEmail(String paEmail) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.paEmail != null && !this.paEmail.equals(paEmail));
        this.paEmail = paEmail;
    }

    public String getOtherContacts() {
        return otherContacts;
    }

    public void setOtherContacts(String otherContacts) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.otherContacts != null && !this.otherContacts.equals(otherContacts));
        this.otherContacts = otherContacts;
    }

    public Integer getIsPrimary() {
        return isPrimary;
    }

    public void setIsPrimary(Integer isPrimary) throws SQLException, ForeignKeyViolationException {
        if (null != isPrimary)
            isPrimary = isPrimary == 0 ? null : isPrimary;
        setWasChanged(this.isPrimary != null && !this.isPrimary.equals(isPrimary));
        this.isPrimary = isPrimary;
    }

    public Integer getIsSubscriber() {
        return isSubscriber;
    }

    public void setIsSubscriber(Integer isSubscriber) throws SQLException, ForeignKeyViolationException {
        if (null != isSubscriber)
            isSubscriber = isSubscriber == 0 ? null : isSubscriber;
        setWasChanged(this.isSubscriber != null && !this.isSubscriber.equals(isSubscriber));
        this.isSubscriber = isSubscriber;
    }

    public Integer getIsMarketintl() {
        return isMarketintl;
    }

    public void setIsMarketintl(Integer isMarketintl) throws SQLException, ForeignKeyViolationException {
        if (null != isMarketintl)
            isMarketintl = isMarketintl == 0 ? null : isMarketintl;
        setWasChanged(this.isMarketintl != null && !this.isMarketintl.equals(isMarketintl));
        this.isMarketintl = isMarketintl;
    }

    public Integer getIsMediabrief() {
        return isMediabrief;
    }

    public void setIsMediabrief(Integer isMediabrief) throws SQLException, ForeignKeyViolationException {
        if (null != isMediabrief)
            isMediabrief = isMediabrief == 0 ? null : isMediabrief;
        setWasChanged(this.isMediabrief != null && !this.isMediabrief.equals(isMediabrief));
        this.isMediabrief = isMediabrief;
    }

    public Integer getIsInsourcebook() {
        return isInsourcebook;
    }

    public void setIsInsourcebook(Integer isInsourcebook) throws SQLException, ForeignKeyViolationException {
        if (null != isInsourcebook)
            isInsourcebook = isInsourcebook == 0 ? null : isInsourcebook;
        setWasChanged(this.isInsourcebook != null && !this.isInsourcebook.equals(isInsourcebook));
        this.isInsourcebook = isInsourcebook;
    }

    public Integer getIsAibCoordinator() {
        return isAibCoordinator;
    }

    public void setIsAibCoordinator(Integer isAibCoordinator) throws SQLException, ForeignKeyViolationException {
        if (null != isAibCoordinator)
            isAibCoordinator = isAibCoordinator == 0 ? null : isAibCoordinator;
        setWasChanged(this.isAibCoordinator != null && !this.isAibCoordinator.equals(isAibCoordinator));
        this.isAibCoordinator = isAibCoordinator;
    }

    public Integer getIsAibJudge() {
        return isAibJudge;
    }

    public void setIsAibJudge(Integer isAibJudge) throws SQLException, ForeignKeyViolationException {
        if (null != isAibJudge)
            isAibJudge = isAibJudge == 0 ? null : isAibJudge;
        setWasChanged(this.isAibJudge != null && !this.isAibJudge.equals(isAibJudge));
        this.isAibJudge = isAibJudge;
    }

    public Integer getIsAibEntrant() {
        return isAibEntrant;
    }

    public void setIsAibEntrant(Integer isAibEntrant) throws SQLException, ForeignKeyViolationException {
        if (null != isAibEntrant)
            isAibEntrant = isAibEntrant == 0 ? null : isAibEntrant;
        setWasChanged(this.isAibEntrant != null && !this.isAibEntrant.equals(isAibEntrant));
        this.isAibEntrant = isAibEntrant;
    }

    public Integer getIsIndividualMember() {
        return this.isIndividualMember;
    }

    public void setIsIndividualMember(Integer isIndividualMember) throws SQLException, ForeignKeyViolationException {
        if (null != isIndividualMember) {
            isIndividualMember = isIndividualMember == 0 ? null : isIndividualMember;
        }
        this.setWasChanged(this.isIndividualMember != null && !this.isIndividualMember.equals(isIndividualMember));
        this.isIndividualMember = isIndividualMember;
    }

    public Date getVerifyDate() {
        return verifyDate;
    }

    public void setVerifyDate(Date verifyDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.verifyDate != null && !this.verifyDate.equals(verifyDate));
        this.verifyDate = verifyDate;
    }

    public Integer getSalesContactId() {
        return salesContactId;
    }

    public void setSalesContactId(Integer salesContactId) throws SQLException, ForeignKeyViolationException {
        if (null != salesContactId)
            salesContactId = salesContactId == 0 ? null : salesContactId;
        if (salesContactId!=null && !User.exists(getConnection(),"user_id = " + salesContactId)) {
            throw new ForeignKeyViolationException("Can't set sales_contact_id, foreign key violation: people_user_fk2");
        }
        setWasChanged(this.salesContactId != null && !this.salesContactId.equals(salesContactId));
        this.salesContactId = salesContactId;
    }

    public Date getActionDate() {
        return actionDate;
    }

    public void setActionDate(Date actionDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.actionDate != null && !this.actionDate.equals(actionDate));
        this.actionDate = actionDate;
    }

    public String getNextAction() {
        return nextAction;
    }

    public void setNextAction(String nextAction) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.nextAction != null && !this.nextAction.equals(nextAction));
        this.nextAction = nextAction;
    }

    public String getExternalUser() {
        return externalUser;
    }

    public void setExternalUser(String externalUser) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.externalUser != null && !this.externalUser.equals(externalUser));
        this.externalUser = externalUser;
    }

    public String getExternalPasswd() {
        return externalPasswd;
    }

    public void setExternalPasswd(String externalPasswd) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.externalPasswd != null && !this.externalPasswd.equals(externalPasswd));
        this.externalPasswd = externalPasswd;
    }

    public Integer getLasteditedBy() {
        return lasteditedBy;
    }

    public void setLasteditedBy(Integer lasteditedBy) throws SQLException, ForeignKeyViolationException {
        if (null != lasteditedBy)
            lasteditedBy = lasteditedBy == 0 ? null : lasteditedBy;
        if (lasteditedBy!=null && !User.exists(getConnection(),"user_id = " + lasteditedBy)) {
            throw new ForeignKeyViolationException("Can't set lastedited_by, foreign key violation: people_user_fk");
        }
        setWasChanged(this.lasteditedBy != null && !this.lasteditedBy.equals(lasteditedBy));
        this.lasteditedBy = lasteditedBy;
    }

    public Timestamp getLasteditDate() {
        return lasteditDate;
    }

    public void setLasteditDate(Timestamp lasteditDate) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.lasteditDate != null && !this.lasteditDate.equals(lasteditDate));
        this.lasteditDate = lasteditDate;
    }

    public Integer getIsInvoiceCntct() {
        return isInvoiceCntct;
    }

    public void setIsInvoiceCntct(Integer isInvoiceCntct) throws SQLException, ForeignKeyViolationException {
        if (null != isInvoiceCntct)
            isInvoiceCntct = isInvoiceCntct == 0 ? null : isInvoiceCntct;
        setWasChanged(this.isInvoiceCntct != null && !this.isInvoiceCntct.equals(isInvoiceCntct));
        this.isInvoiceCntct = isInvoiceCntct;
    }

    public Integer getIsDigitalChnl() {
        return isDigitalChnl;
    }

    public void setIsDigitalChnl(Integer isDigitalChnl) throws SQLException, ForeignKeyViolationException {
        if (null != isDigitalChnl)
            isDigitalChnl = isDigitalChnl == 0 ? null : isDigitalChnl;
        setWasChanged(this.isDigitalChnl != null && !this.isDigitalChnl.equals(isDigitalChnl));
        this.isDigitalChnl = isDigitalChnl;
    }

    public Integer getCountryId() {
        return countryId;
    }

    public void setCountryId(Integer countryId) throws SQLException, ForeignKeyViolationException {
        if (null != countryId)
            countryId = countryId == 0 ? null : countryId;
        if (countryId!=null && !Country.exists(getConnection(),"country_id = " + countryId)) {
            throw new ForeignKeyViolationException("Can't set country_id, foreign key violation: people_country_fk");
        }
        setWasChanged(this.countryId != null && !this.countryId.equals(countryId));
        this.countryId = countryId;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[]{this.getPeopleId(), this.getSource(), this.getTitle(), this.getFirstName(), this.getLastName(), this.getSuffix(), this.getGreeting(), this.getLocationId(), this.getPhoto(), this.getLevel(), this.getJobDiscip(), this.getDepartment(), this.getSpecAddress(), this.getMailaddress(), this.getMailpostcode(), this.getDeskPhone(), this.getDeskFax(), this.getMobilePhone(), this.getMainEmail(), this.getAlterEmail(), this.getPa(), this.getPaPhone(), this.getPaEmail(), this.getOtherContacts(), this.getIsPrimary(), this.getIsSubscriber(), this.getIsMarketintl(), this.getIsMediabrief(), this.getIsInsourcebook(), this.getIsAibCoordinator(), this.getIsAibJudge(), this.getIsAibEntrant(), this.getIsIndividualMember(), this.getVerifyDate(), this.getSalesContactId(), this.getActionDate(), this.getNextAction(), this.getExternalUser(), this.getExternalPasswd(), this.getLasteditedBy(), this.getLasteditDate(), this.getIsInvoiceCntct(), this.getIsDigitalChnl(), this.getCountryId()};
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = People.splitStr((String)row, (String)delimiter);
        try {
            this.setPeopleId(Integer.parseInt(flds[0]));
        }
        catch (NumberFormatException ne) {
            this.setPeopleId(null);
        }
        this.setSource(flds[1]);
        this.setTitle(flds[2]);
        this.setFirstName(flds[3]);
        this.setLastName(flds[4]);
        this.setSuffix(flds[5]);
        this.setGreeting(flds[6]);
        try {
            this.setLocationId(Integer.parseInt(flds[7]));
        }
        catch (NumberFormatException ne) {
            this.setLocationId(null);
        }
        this.setPhoto(flds[8]);
        this.setLevel(flds[9]);
        this.setJobDiscip(flds[10]);
        this.setDepartment(flds[11]);
        this.setSpecAddress(flds[12]);
        this.setMailaddress(flds[13]);
        this.setMailpostcode(flds[14]);
        this.setDeskPhone(flds[15]);
        this.setDeskFax(flds[16]);
        this.setMobilePhone(flds[17]);
        this.setMainEmail(flds[18]);
        this.setAlterEmail(flds[19]);
        this.setPa(flds[20]);
        this.setPaPhone(flds[21]);
        this.setPaEmail(flds[22]);
        this.setOtherContacts(flds[23]);
        try {
            this.setIsPrimary(Integer.parseInt(flds[24]));
        }
        catch (NumberFormatException ne) {
            this.setIsPrimary(null);
        }
        try {
            this.setIsSubscriber(Integer.parseInt(flds[25]));
        }
        catch (NumberFormatException ne) {
            this.setIsSubscriber(null);
        }
        try {
            this.setIsMarketintl(Integer.parseInt(flds[26]));
        }
        catch (NumberFormatException ne) {
            this.setIsMarketintl(null);
        }
        try {
            this.setIsMediabrief(Integer.parseInt(flds[27]));
        }
        catch (NumberFormatException ne) {
            this.setIsMediabrief(null);
        }
        try {
            this.setIsInsourcebook(Integer.parseInt(flds[28]));
        }
        catch (NumberFormatException ne) {
            this.setIsInsourcebook(null);
        }
        try {
            this.setIsAibCoordinator(Integer.parseInt(flds[29]));
        }
        catch (NumberFormatException ne) {
            this.setIsAibCoordinator(null);
        }
        try {
            this.setIsAibJudge(Integer.parseInt(flds[30]));
        }
        catch (NumberFormatException ne) {
            this.setIsAibJudge(null);
        }
        try {
            this.setIsAibEntrant(Integer.parseInt(flds[31]));
        }
        catch (NumberFormatException ne) {
            this.setIsAibEntrant(null);
        }
        try {
            this.setIsIndividualMember(Integer.parseInt(flds[32]));
        }
        catch (NumberFormatException ne) {
            this.setIsIndividualMember(null);
        }
        this.setVerifyDate(People.toDate((String)flds[33]));
        try {
            this.setSalesContactId(Integer.parseInt(flds[34]));
        }
        catch (NumberFormatException ne) {
            this.setSalesContactId(null);
        }
        this.setActionDate(People.toDate((String)flds[35]));
        this.setNextAction(flds[36]);
        this.setExternalUser(flds[37]);
        this.setExternalPasswd(flds[38]);
        try {
            this.setLasteditedBy(Integer.parseInt(flds[39]));
        }
        catch (NumberFormatException ne) {
            this.setLasteditedBy(null);
        }
        this.setLasteditDate(People.toTimeStamp((String)flds[40]));
        try {
            this.setIsInvoiceCntct(Integer.parseInt(flds[41]));
        }
        catch (NumberFormatException ne) {
            this.setIsInvoiceCntct(null);
        }
        try {
            this.setIsDigitalChnl(Integer.parseInt(flds[42]));
        }
        catch (NumberFormatException ne) {
            this.setIsDigitalChnl(null);
        }
        try {
            this.setCountryId(Integer.parseInt(flds[43]));
        }
        catch (NumberFormatException ne) {
            this.setCountryId(null);
        }
    }
}
