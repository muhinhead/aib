// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat May 18 10:20:15 EEST 2013
// generated file: do not modify
package com.aib.orm;

import com.aib.orm.dbobject.DbObject;
import com.aib.orm.dbobject.ForeignKeyViolationException;
import com.aib.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Peopleloc extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer peoplelocId = null;
    private Integer peopleId = null;
    private Integer locationId = null;

    public Peopleloc(Connection connection) {
        super(connection, "peopleloc", "peopleloc_id");
        setColumnNames(new String[]{"peopleloc_id", "people_id", "location_id"});
    }

    public Peopleloc(Connection connection, Integer peoplelocId, Integer peopleId, Integer locationId) {
        super(connection, "peopleloc", "peopleloc_id");
        setNew(peoplelocId.intValue() <= 0);
//        if (peoplelocId.intValue() != 0) {
            this.peoplelocId = peoplelocId;
//        }
        this.peopleId = peopleId;
        this.locationId = locationId;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Peopleloc peopleloc = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT peopleloc_id,people_id,location_id FROM peopleloc WHERE peopleloc_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                peopleloc = new Peopleloc(getConnection());
                peopleloc.setPeoplelocId(new Integer(rs.getInt(1)));
                peopleloc.setPeopleId(new Integer(rs.getInt(2)));
                peopleloc.setLocationId(new Integer(rs.getInt(3)));
                peopleloc.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return peopleloc;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO peopleloc ("+(getPeoplelocId().intValue()!=0?"peopleloc_id,":"")+"people_id,location_id) values("+(getPeoplelocId().intValue()!=0?"?,":"")+"?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getPeoplelocId().intValue()!=0) {
                 ps.setObject(++n, getPeoplelocId());
             }
             ps.setObject(++n, getPeopleId());
             ps.setObject(++n, getLocationId());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getPeoplelocId().intValue()==0) {
             stmt = "SELECT max(peopleloc_id) FROM peopleloc";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setPeoplelocId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE peopleloc " +
                    "SET people_id = ?, location_id = ?" + 
                    " WHERE peopleloc_id = " + getPeoplelocId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getPeopleId());
                ps.setObject(2, getLocationId());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM peopleloc " +
                "WHERE peopleloc_id = " + getPeoplelocId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setPeoplelocId(new Integer(-getPeoplelocId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getPeoplelocId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT peopleloc_id,people_id,location_id FROM peopleloc " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Peopleloc(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),new Integer(rs.getInt(3))));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Peopleloc[] objects = new Peopleloc[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Peopleloc peopleloc = (Peopleloc) lst.get(i);
            objects[i] = peopleloc;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT peopleloc_id FROM peopleloc " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getPeoplelocId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return peoplelocId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setPeoplelocId(id);
        setNew(prevIsNew);
    }

    public Integer getPeoplelocId() {
        return peoplelocId;
    }

    public void setPeoplelocId(Integer peoplelocId) throws ForeignKeyViolationException {
        setWasChanged(this.peoplelocId != null && this.peoplelocId != peoplelocId);
        this.peoplelocId = peoplelocId;
        setNew(peoplelocId.intValue() == 0);
    }

    public Integer getPeopleId() {
        return peopleId;
    }

    public void setPeopleId(Integer peopleId) throws SQLException, ForeignKeyViolationException {
        if (peopleId!=null && !People.exists(getConnection(),"people_id = " + peopleId)) {
            throw new ForeignKeyViolationException("Can't set people_id, foreign key violation: peopleloc_people_fk");
        }
        setWasChanged(this.peopleId != null && !this.peopleId.equals(peopleId));
        this.peopleId = peopleId;
    }

    public Integer getLocationId() {
        return locationId;
    }

    public void setLocationId(Integer locationId) throws SQLException, ForeignKeyViolationException {
        if (locationId!=null && !Location.exists(getConnection(),"location_id = " + locationId)) {
            throw new ForeignKeyViolationException("Can't set location_id, foreign key violation: peopleloc_location_fk");
        }
        setWasChanged(this.locationId != null && !this.locationId.equals(locationId));
        this.locationId = locationId;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[3];
        columnValues[0] = getPeoplelocId();
        columnValues[1] = getPeopleId();
        columnValues[2] = getLocationId();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setPeoplelocId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setPeoplelocId(null);
        }
        try {
            setPeopleId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setPeopleId(null);
        }
        try {
            setLocationId(Integer.parseInt(flds[2]));
        } catch(NumberFormatException ne) {
            setLocationId(null);
        }
    }
}
