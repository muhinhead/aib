// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Fri Jun 28 16:12:16 EEST 2013
// generated file: do not modify
package com.aib.orm;

import com.aib.orm.dbobject.DbObject;
import com.aib.orm.dbobject.ForeignKeyViolationException;
import com.aib.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Reportformitem extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer reportformitemId = null;
    private Integer reportformId = null;
    private String columnname = null;
    private String header = null;
    private String format = null;

    public Reportformitem(Connection connection) {
        super(connection, "reportformitem", "reportformitem_id");
        setColumnNames(new String[]{"reportformitem_id", "reportform_id", "columnname", "header", "format"});
    }

    public Reportformitem(Connection connection, Integer reportformitemId, Integer reportformId, String columnname, String header, String format) {
        super(connection, "reportformitem", "reportformitem_id");
        setNew(reportformitemId.intValue() <= 0);
//        if (reportformitemId.intValue() != 0) {
            this.reportformitemId = reportformitemId;
//        }
        this.reportformId = reportformId;
        this.columnname = columnname;
        this.header = header;
        this.format = format;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Reportformitem reportformitem = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT reportformitem_id,reportform_id,columnname,header,format FROM reportformitem WHERE reportformitem_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                reportformitem = new Reportformitem(getConnection());
                reportformitem.setReportformitemId(new Integer(rs.getInt(1)));
                reportformitem.setReportformId(new Integer(rs.getInt(2)));
                reportformitem.setColumnname(rs.getString(3));
                reportformitem.setHeader(rs.getString(4));
                reportformitem.setFormat(rs.getString(5));
                reportformitem.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return reportformitem;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO reportformitem ("+(getReportformitemId().intValue()!=0?"reportformitem_id,":"")+"reportform_id,columnname,header,format) values("+(getReportformitemId().intValue()!=0?"?,":"")+"?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getReportformitemId().intValue()!=0) {
                 ps.setObject(++n, getReportformitemId());
             }
             ps.setObject(++n, getReportformId());
             ps.setObject(++n, getColumnname());
             ps.setObject(++n, getHeader());
             ps.setObject(++n, getFormat());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getReportformitemId().intValue()==0) {
             stmt = "SELECT max(reportformitem_id) FROM reportformitem";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setReportformitemId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE reportformitem " +
                    "SET reportform_id = ?, columnname = ?, header = ?, format = ?" + 
                    " WHERE reportformitem_id = " + getReportformitemId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getReportformId());
                ps.setObject(2, getColumnname());
                ps.setObject(3, getHeader());
                ps.setObject(4, getFormat());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM reportformitem " +
                "WHERE reportformitem_id = " + getReportformitemId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setReportformitemId(new Integer(-getReportformitemId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getReportformitemId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT reportformitem_id,reportform_id,columnname,header,format FROM reportformitem " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Reportformitem(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),rs.getString(3),rs.getString(4),rs.getString(5)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Reportformitem[] objects = new Reportformitem[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Reportformitem reportformitem = (Reportformitem) lst.get(i);
            objects[i] = reportformitem;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT reportformitem_id FROM reportformitem " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getReportformitemId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return reportformitemId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setReportformitemId(id);
        setNew(prevIsNew);
    }

    public Integer getReportformitemId() {
        return reportformitemId;
    }

    public void setReportformitemId(Integer reportformitemId) throws ForeignKeyViolationException {
        setWasChanged(this.reportformitemId != null && this.reportformitemId != reportformitemId);
        this.reportformitemId = reportformitemId;
        setNew(reportformitemId.intValue() == 0);
    }

    public Integer getReportformId() {
        return reportformId;
    }

    public void setReportformId(Integer reportformId) throws SQLException, ForeignKeyViolationException {
        if (reportformId!=null && !Reportform.exists(getConnection(),"reportform_id = " + reportformId)) {
            throw new ForeignKeyViolationException("Can't set reportform_id, foreign key violation: reportformitem_reportform_fk");
        }
        setWasChanged(this.reportformId != null && !this.reportformId.equals(reportformId));
        this.reportformId = reportformId;
    }

    public String getColumnname() {
        return columnname;
    }

    public void setColumnname(String columnname) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.columnname != null && !this.columnname.equals(columnname));
        this.columnname = columnname;
    }

    public String getHeader() {
        return header;
    }

    public void setHeader(String header) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.header != null && !this.header.equals(header));
        this.header = header;
    }

    public String getFormat() {
        return format;
    }

    public void setFormat(String format) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.format != null && !this.format.equals(format));
        this.format = format;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[5];
        columnValues[0] = getReportformitemId();
        columnValues[1] = getReportformId();
        columnValues[2] = getColumnname();
        columnValues[3] = getHeader();
        columnValues[4] = getFormat();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setReportformitemId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setReportformitemId(null);
        }
        try {
            setReportformId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setReportformId(null);
        }
        setColumnname(flds[2]);
        setHeader(flds[3]);
        setFormat(flds[4]);
    }
}
